/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ICasinoInterface extends utils.Interface {
  functions: {
    "RollTheDice()": FunctionFragment;
    "SpinTheDrum(string)": FunctionFragment;
    "addToBL(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "RollTheDice"
      | "SpinTheDrum"
      | "addToBL"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "RollTheDice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SpinTheDrum",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addToBL",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "RollTheDice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SpinTheDrum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToBL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AmountDropped(address,uint256)": EventFragment;
    "CollorDropped(address,string)": EventFragment;
    "Draw(address)": EventFragment;
    "Loser(address,uint256,uint256)": EventFragment;
    "Winner(address,uint256,uint256)": EventFragment;
    "addToBlackList(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AmountDropped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollorDropped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Draw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Loser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Winner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "addToBlackList"): EventFragment;
}

export interface AmountDroppedEventObject {
  player: string;
  quiantityPoints: BigNumber;
}
export type AmountDroppedEvent = TypedEvent<
  [string, BigNumber],
  AmountDroppedEventObject
>;

export type AmountDroppedEventFilter = TypedEventFilter<AmountDroppedEvent>;

export interface CollorDroppedEventObject {
  player: string;
  color: string;
}
export type CollorDroppedEvent = TypedEvent<
  [string, string],
  CollorDroppedEventObject
>;

export type CollorDroppedEventFilter = TypedEventFilter<CollorDroppedEvent>;

export interface DrawEventObject {
  player: string;
}
export type DrawEvent = TypedEvent<[string], DrawEventObject>;

export type DrawEventFilter = TypedEventFilter<DrawEvent>;

export interface LoserEventObject {
  supplier: string;
  numberOfWinner: BigNumber;
  bid: BigNumber;
}
export type LoserEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LoserEventObject
>;

export type LoserEventFilter = TypedEventFilter<LoserEvent>;

export interface WinnerEventObject {
  supplier: string;
  numberOfWinner: BigNumber;
  prize: BigNumber;
}
export type WinnerEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WinnerEventObject
>;

export type WinnerEventFilter = TypedEventFilter<WinnerEvent>;

export interface addToBlackListEventObject {
  intruder: string;
}
export type addToBlackListEvent = TypedEvent<
  [string],
  addToBlackListEventObject
>;

export type addToBlackListEventFilter = TypedEventFilter<addToBlackListEvent>;

export interface ICasino extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICasinoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RollTheDice(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SpinTheDrum(
      color: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToBL(
      intruder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  RollTheDice(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SpinTheDrum(
    color: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToBL(
    intruder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    RollTheDice(overrides?: CallOverrides): Promise<void>;

    SpinTheDrum(
      color: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToBL(
      intruder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AmountDropped(address,uint256)"(
      player?: PromiseOrValue<string> | null,
      quiantityPoints?: PromiseOrValue<BigNumberish> | null
    ): AmountDroppedEventFilter;
    AmountDropped(
      player?: PromiseOrValue<string> | null,
      quiantityPoints?: PromiseOrValue<BigNumberish> | null
    ): AmountDroppedEventFilter;

    "CollorDropped(address,string)"(
      player?: PromiseOrValue<string> | null,
      color?: PromiseOrValue<string> | null
    ): CollorDroppedEventFilter;
    CollorDropped(
      player?: PromiseOrValue<string> | null,
      color?: PromiseOrValue<string> | null
    ): CollorDroppedEventFilter;

    "Draw(address)"(player?: PromiseOrValue<string> | null): DrawEventFilter;
    Draw(player?: PromiseOrValue<string> | null): DrawEventFilter;

    "Loser(address,uint256,uint256)"(
      supplier?: PromiseOrValue<string> | null,
      numberOfWinner?: null,
      bid?: PromiseOrValue<BigNumberish> | null
    ): LoserEventFilter;
    Loser(
      supplier?: PromiseOrValue<string> | null,
      numberOfWinner?: null,
      bid?: PromiseOrValue<BigNumberish> | null
    ): LoserEventFilter;

    "Winner(address,uint256,uint256)"(
      supplier?: PromiseOrValue<string> | null,
      numberOfWinner?: null,
      prize?: PromiseOrValue<BigNumberish> | null
    ): WinnerEventFilter;
    Winner(
      supplier?: PromiseOrValue<string> | null,
      numberOfWinner?: null,
      prize?: PromiseOrValue<BigNumberish> | null
    ): WinnerEventFilter;

    "addToBlackList(address)"(
      intruder?: PromiseOrValue<string> | null
    ): addToBlackListEventFilter;
    addToBlackList(
      intruder?: PromiseOrValue<string> | null
    ): addToBlackListEventFilter;
  };

  estimateGas: {
    RollTheDice(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SpinTheDrum(
      color: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToBL(
      intruder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RollTheDice(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SpinTheDrum(
      color: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToBL(
      intruder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
