/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CoinFlip,
  CoinFlipInterface,
} from "../../../contracts/coinFlip.sol/CoinFlip";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "CoinFlipRequest",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "didWin",
        type: "bool",
      },
    ],
    name: "CoinflipResult",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "enum CoinFlip.CoinFlipSelection",
        name: "choice",
        type: "uint8",
      },
    ],
    name: "flip",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "getStatus",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "fees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "randomWord",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "player",
            type: "address",
          },
          {
            internalType: "bool",
            name: "didWin",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "fulfilled",
            type: "bool",
          },
          {
            internalType: "enum CoinFlip.CoinFlipSelection",
            name: "choice",
            type: "uint8",
          },
        ],
        internalType: "struct CoinFlip.CoinFlipStatus",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "statuses",
    outputs: [
      {
        internalType: "uint256",
        name: "fees",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "randomWord",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        internalType: "bool",
        name: "didWin",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "fulfilled",
        type: "bool",
      },
      {
        internalType: "enum CoinFlip.CoinFlipSelection",
        name: "choice",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405273326c977e6efc84e512bb9c30f76e30c160ed06fb60805273708701a1dff4f478de54383e49a627ed4852c81660a05260805160a051610bb661006e600039600081816101400152818161031a015281816106e901526107f2015260006106bf0152610bb66000f3fe60806040526004361061003f5760003560e01c80631fe543e3146100445780635c622a0e14610066578063638c06371461009c578063e67b932c146100bd575b600080fd5b34801561005057600080fd5b5061006461005f366004610890565b610135565b005b34801561007257600080fd5b5061008661008136600461095a565b6101c0565b60405161009391906109ab565b60405180910390f35b6100af6100aa366004610a02565b610294565b604051908152602001610093565b3480156100c957600080fd5b506101236100d836600461095a565b6000602081905290815260409020805460018201546002909201549091906001600160a01b0381169060ff600160a01b8204811691600160a81b8104821691600160b01b9091041686565b60405161009396959493929190610a2a565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101b25760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792056524620563220777261707065722063616e2066756c66696c6c0060448201526064015b60405180910390fd5b6101bc82826104a5565b5050565b6101f66040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a082015290565b60008281526020818152604091829020825160c081018452815481526001808301549382019390935260028201546001600160a01b0381169482019490945260ff600160a01b8504811615156060830152600160a81b85048116151560808301529093919260a0850192600160b01b90049091169081111561027a5761027a610973565b600181111561028b5761028b610973565b90525092915050565b60003466038d7ea4c68000146102e25760405162461bcd60e51b8152602060048201526013602482015272115b9d1c9e481999595cc81b9bdd081cd95b9d606a1b60448201526064016101a9565b60006102f4620f424060036001610699565b6040805160c08101918290526310c1b4d560e21b909152620f424060c4820152909150807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634306d35460e48301602060405180830381865afa158015610368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038c9190610a6f565b815260006020820181905233604083015260608201819052608082015260a0018460018111156103be576103be610973565b905260008281526020818152604091829020835181559083015160018083019190915591830151600282018054606086015160808701511515600160a81b0260ff60a81b19911515600160a01b026001600160a81b03199093166001600160a01b0390951694909417919091179081168317825560a08601519394919260ff60b01b191661ffff60a81b199091161790600160b01b90849081111561046557610465610973565b0217905550506040518281527fc717121f790f1962df8bdfbee9885b81f91725243973dc7cd7c7976f29d4591b915060200160405180910390a192915050565b6000828152602081905260409020546104f45760405162461bcd60e51b815260206004820152601160248201527014995c5d595cdd081b9bdd08199bdd5b99607a1b60448201526064016101a9565b6000828152602081905260408120600201805460ff60a81b1916600160a81b179055815182919061052757610527610a88565b602002602001015160008084815260200190815260200160002060010181905550600060028260008151811061055f5761055f610a88565b60200260200101516105719190610a9e565b60000361057c575060015b80600181111561058e5761058e610973565b600084815260208190526040902060020154600160b01b900460ff1660018111156105bb576105bb610973565b0361063c5760008381526020819052604090206002908101805460ff60a01b198116600160a01b179091556001600160a01b0316906108fc906106069066038d7ea4c6800090610ac0565b6001600160801b03169081150290604051600060405180830381858888f1935050505015801561063a573d6000803e3d6000fd5b505b60008381526020818152604091829020600201548251868152600160a01b90910460ff161515918101919091527fe7e62f6fa85acb02a9f6572884d51ebe57aac8ae3c73cb35540ce43abd774333910160405180910390a1505050565b6040516310c1b4d560e21b815263ffffffff841660048201526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691634000aea0917f00000000000000000000000000000000000000000000000000000000000000009190821690634306d35490602401602060405180830381865afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107579190610a6f565b6040805163ffffffff808b16602083015261ffff8a169282019290925290871660608201526080016040516020818303038152906040526040518463ffffffff1660e01b81526004016107ac93929190610af9565b6020604051808303816000875af11580156107cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ef9190610b5e565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc2a88c36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561084e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108729190610a6f565b949350505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156108a357600080fd5b8235915060208084013567ffffffffffffffff808211156108c357600080fd5b818601915086601f8301126108d757600080fd5b8135818111156108e9576108e961087a565b8060051b604051601f19603f8301168101818110858211171561090e5761090e61087a565b60405291825284820192508381018501918983111561092c57600080fd5b938501935b8285101561094a57843584529385019392850192610931565b8096505050505050509250929050565b60006020828403121561096c57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600281106109a757634e487b7160e01b600052602160045260246000fd5b9052565b81518152602080830151908201526040808301516001600160a01b03169082015260608083015115159082015260808083015115159082015260a08083015160c08301916109fb90840182610989565b5092915050565b600060208284031215610a1457600080fd5b813560028110610a2357600080fd5b9392505050565b868152602081018690526001600160a01b03851660408201528315156060820152821515608082015260c08101610a6460a0830184610989565b979650505050505050565b600060208284031215610a8157600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600082610abb57634e487b7160e01b600052601260045260246000fd5b500690565b6001600160801b03818116838216028082169190828114610af157634e487b7160e01b600052601160045260246000fd5b505092915050565b60018060a01b038416815260006020848184015260606040840152835180606085015260005b81811015610b3b57858101830151858201608001528201610b1f565b506000608082860101526080601f19601f83011685010192505050949350505050565b600060208284031215610b7057600080fd5b81518015158114610a2357600080fdfea264697066735822122021724141225fcca092d1593af6de219d1aa485a09bf0d86036e4eb779557bb2464736f6c63430008120033";

type CoinFlipConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CoinFlipConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CoinFlip__factory extends ContractFactory {
  constructor(...args: CoinFlipConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<CoinFlip> {
    return super.deploy(overrides || {}) as Promise<CoinFlip>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CoinFlip {
    return super.attach(address) as CoinFlip;
  }
  override connect(signer: Signer): CoinFlip__factory {
    return super.connect(signer) as CoinFlip__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CoinFlipInterface {
    return new utils.Interface(_abi) as CoinFlipInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CoinFlip {
    return new Contract(address, _abi, signerOrProvider) as CoinFlip;
  }
}
