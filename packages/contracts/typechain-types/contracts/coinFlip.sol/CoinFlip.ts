/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace CoinFlip {
  export type CoinFlipStatusStruct = {
    fees: PromiseOrValue<BigNumberish>;
    randomWord: PromiseOrValue<BigNumberish>;
    player: PromiseOrValue<string>;
    didWin: PromiseOrValue<boolean>;
    fulfilled: PromiseOrValue<boolean>;
    choice: PromiseOrValue<BigNumberish>;
  };

  export type CoinFlipStatusStructOutput = [
    BigNumber,
    BigNumber,
    string,
    boolean,
    boolean,
    number
  ] & {
    fees: BigNumber;
    randomWord: BigNumber;
    player: string;
    didWin: boolean;
    fulfilled: boolean;
    choice: number;
  };
}

export interface CoinFlipInterface extends utils.Interface {
  functions: {
    "flip(uint8)": FunctionFragment;
    "getStatus(uint256)": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "statuses(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "flip"
      | "getStatus"
      | "rawFulfillRandomWords"
      | "statuses"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "flip",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "statuses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "flip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "statuses", data: BytesLike): Result;

  events: {
    "CoinFlipRequest(uint256)": EventFragment;
    "CoinflipResult(uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CoinFlipRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CoinflipResult"): EventFragment;
}

export interface CoinFlipRequestEventObject {
  requestId: BigNumber;
}
export type CoinFlipRequestEvent = TypedEvent<
  [BigNumber],
  CoinFlipRequestEventObject
>;

export type CoinFlipRequestEventFilter = TypedEventFilter<CoinFlipRequestEvent>;

export interface CoinflipResultEventObject {
  requestId: BigNumber;
  didWin: boolean;
}
export type CoinflipResultEvent = TypedEvent<
  [BigNumber, boolean],
  CoinflipResultEventObject
>;

export type CoinflipResultEventFilter = TypedEventFilter<CoinflipResultEvent>;

export interface CoinFlip extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoinFlipInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    flip(
      choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getStatus(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[CoinFlip.CoinFlipStatusStructOutput]>;

    rawFulfillRandomWords(
      _requestId: PromiseOrValue<BigNumberish>,
      _randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    statuses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean, boolean, number] & {
        fees: BigNumber;
        randomWord: BigNumber;
        player: string;
        didWin: boolean;
        fulfilled: boolean;
        choice: number;
      }
    >;
  };

  flip(
    choice: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getStatus(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<CoinFlip.CoinFlipStatusStructOutput>;

  rawFulfillRandomWords(
    _requestId: PromiseOrValue<BigNumberish>,
    _randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  statuses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, boolean, boolean, number] & {
      fees: BigNumber;
      randomWord: BigNumber;
      player: string;
      didWin: boolean;
      fulfilled: boolean;
      choice: number;
    }
  >;

  callStatic: {
    flip(
      choice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatus(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<CoinFlip.CoinFlipStatusStructOutput>;

    rawFulfillRandomWords(
      _requestId: PromiseOrValue<BigNumberish>,
      _randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    statuses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean, boolean, number] & {
        fees: BigNumber;
        randomWord: BigNumber;
        player: string;
        didWin: boolean;
        fulfilled: boolean;
        choice: number;
      }
    >;
  };

  filters: {
    "CoinFlipRequest(uint256)"(requestId?: null): CoinFlipRequestEventFilter;
    CoinFlipRequest(requestId?: null): CoinFlipRequestEventFilter;

    "CoinflipResult(uint256,bool)"(
      requestId?: null,
      didWin?: null
    ): CoinflipResultEventFilter;
    CoinflipResult(requestId?: null, didWin?: null): CoinflipResultEventFilter;
  };

  estimateGas: {
    flip(
      choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getStatus(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawFulfillRandomWords(
      _requestId: PromiseOrValue<BigNumberish>,
      _randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    statuses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    flip(
      choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getStatus(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      _requestId: PromiseOrValue<BigNumberish>,
      _randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    statuses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
